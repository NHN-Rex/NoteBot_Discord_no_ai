from discord.ext import commands
import discord
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import LinearSegmentedColormap
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from io import BytesIO
from flask import Flask, request
from threading import Thread
import json, os, sys, re
import pandas as pd
from thongke import generate_chart_pay_by_month, generate_chart_debt
# from slang_handle import handle_message, replace_slang_with_amount
# from final_core import extract_entities

project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Google Sheets setup
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]


# s·ª≠ d·ª•ng tr√™n render
# L·∫•y n·ªôi dung JSON t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
credentials_info = os.getenv("GOOGLE_CREDENTIALS_JSON")
# Parse string JSON th√†nh dict
credentials_dict = json.loads(credentials_info)
creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client_gs = gspread.authorize(creds)

# # s·ª≠ d·ª•ng local
# creds = ServiceAccountCredentials.from_json_keyfile_name(
#     "credentials.json", scope)
# client_gs = gspread.authorize(creds)

# Load slang mapping
def load_slang_from_sheet(slang_sheet):
    rows = slang_sheet.get_all_records()
    slang_mapping = {}

    for row in rows:
        key = row['slang'].strip().lower()
        type_ = row['type']
        value_raw = row['value']

        if type_ == "number":
            value = float(value_raw)
        elif type_ == "list":
            value = [v.strip() for v in value_raw.split(",")]
        else:
            value = value_raw

        slang_mapping[key] = value

    return slang_mapping

def replace_slang(text, mapping):
    # S·∫Øp x·∫øp slang theo ƒë·ªô d√†i gi·∫£m d·∫ßn ƒë·ªÉ replace t·ª´ d√†i tr∆∞·ªõc
    sorted_mapping = sorted(mapping.items(), key=lambda x: len(x[0]), reverse=True)
    
    for slang, real_value in sorted_mapping:
        text = text.replace(slang, str(real_value))
    return text


def update_slang_mapping_to_sheet(message_content, sheet_slang_mapping):
    # Regex t√°ch d·∫°ng "bot ngu: something = something"
    pattern = r"bot ngu:\s*(.+?)\s*=\s*(.+)"
    match = re.match(pattern, message_content, re.IGNORECASE)

    if match:
        key = match.group(1).strip()
        value_raw = match.group(2).strip()

        # X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu c·ªßa value
        try:
            value = int(value_raw.replace(",", "").replace(".", ""))
            type_ = "number"
        except ValueError:
            # N·∫øu nh·∫≠p value l√† list c√°ch nhau b·∫±ng d·∫•u ,
            if "," in value_raw:
                value = [v.strip() for v in value_raw.split(",")]
                type_ = "list"
                value_raw = ",".join(value)  # ƒë·ªÉ l∆∞u l√™n sheet
            else:
                value = value_raw
                type_ = "string"

        # Ki·ªÉm tra xem key ƒë√£ t·ªìn t·∫°i ch∆∞a
        rows = sheet_slang_mapping.get_all_records()
        for i, row in enumerate(rows):
            if row['slang'] == key:
                sheet_slang_mapping.update_cell(i+2, 2, type_)
                sheet_slang_mapping.update_cell(i+2, 3, value_raw)
                return f"ƒê√£ c·∫≠p nh·∫≠t: '{key}' ‚Üí '{value_raw}'"

        # N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
        sheet_slang_mapping.append_row([key, type_, value_raw])
        return f"ƒê√£ th√™m m·ªõi: '{key}' ‚Üí '{value_raw}'"
    else:
        return "C√∫ ph√°p sai r·ªìi bro! D√πng ƒë√∫ng d·∫°ng: bot ngu: c√°i n√†y = c√°i kia"

def parse_amount(amount_text, slang_mapping):
    if not amount_text:
        return 0, None

    amt_text = amount_text.lower().replace(",", "").replace(" ", "").strip()
    print(amt_text)
    total_amount = 0

    pattern = r"(\d+(?:\.\d+)?)([a-zA-Z√Ä-·ª∏√†-·ªπ]*)"  # th√™m support ti·∫øng Vi·ªát c√≥ d·∫•u
    matches = re.findall(pattern, amt_text)
    print(matches)

    last_unit = None
    for number_part, unit_part in matches:
        try:
            base_amount = float(number_part)
        except:
            base_amount = 0

        unit_part = unit_part.strip().lower()

        if unit_part:
            if unit_part not in slang_mapping:
                return 0, f"‚ùå ƒê∆°n v·ªã `{unit_part}` ch∆∞a c√≥ trong slang. Vui l√≤ng th√™m b·∫±ng l·ªánh `bot ngu: {unit_part} = gi√° tr·ªã`."
            multiplier = slang_mapping[unit_part]
            total_amount += int(base_amount * multiplier)
            last_unit = unit_part
        else:
            if last_unit and last_unit in slang_mapping:
                next_step = slang_mapping[last_unit] / 10
                total_amount += int(base_amount * next_step)
            else:
                total_amount += int(base_amount)

    return total_amount, None

sheet = client_gs.open("chi_tieu_on_dinh")
sheet_log = sheet.worksheet('log')
sheet_slang_mapping = sheet.worksheet('slang_mapping')
slang_mapping = load_slang_from_sheet(sheet_slang_mapping)

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Web server keep-alive (n·∫øu b·∫°n ch·∫°y tr√™n replit ho·∫∑c c·∫ßn)
app = Flask('')


@app.route('/')
def home():
    user_agent = request.headers.get('User-Agent')
    print(f"Ping t·ª´: {request.remote_addr} - User-Agent: {user_agent}")
    return "Bot ƒëang ch·∫°y ngon l√†nh!"


def run():
    app.run(host='0.0.0.0', port=8080)


def keep_alive():
    t = Thread(target=run)
    t.start()

# Bot events
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh {bot.user}")


@bot.event
async def on_message(message):
    global slang_mapping
    slang_mapping = load_slang_from_sheet(sheet_slang_mapping)
    if message.author == bot.user:
        return

    # N·∫øu l√† command th√¨ b·ªè qua ph·∫ßn ghi chi ti√™u, cho bot.process_commands x·ª≠ l√Ω
    if message.content.startswith('!'):
        await bot.process_commands(message)
        return

    if message.content.lower().startswith("th·ªëng k√™ n·ª£"):
        user = message.author.name
        # slang_mapping = load_slang_from_sheet(sheet_slang_mapping)
        name = replace_slang(user, slang_mapping)
        data = sheet_log.get_all_values()
        time = datetime.now().strftime("%m/%Y")
        chart_debt = generate_chart_debt(name, data)
        if not chart_debt:
            await message.reply(f"{name} Kh√¥ng c√≥ d·ªØ li·ªáu.")
            return
        await message.reply(f"üìä Th·ªëng k√™ n·ª£ ƒë·∫øn th√°ng {time}:",
                        file=discord.File(chart_debt, 'chart.png'))
        return

    # response = handle_message(message.content)
    # if response:
    #     await message.reply(response)

    if message.content.lower().startswith("bot ngu:"):
        response = update_slang_mapping_to_sheet(message.content, sheet_slang_mapping)
        await message.reply(response)
        # slang_mapping = load_slang_from_sheet(sheet_slang_mapping)
        return
    
    if message.content.lower().startswith("format"):
        response = f"‚ÑπÔ∏è**Ng∆∞·ªùi chi** *(kh√¥ng c·∫ßn ghi n·∫øu d√πng t√†i kho·∫£n c·ªßa b·∫°n)*, \n\
        **H·∫°ng m·ª•c chi**, \n\
        **S·ªë ti·ªÅn**, \n\
        **Ng∆∞·ªùi nh·∫≠n**, \n\
        **Ghi ch√∫** *(kh√¥ng c·∫ßn ghi n·∫øu kh√¥ng c√≥)*."
        await message.reply(response)
        return

    text = message.content
    # text = replace_slang_with_amount(text, slang_amount_mapping)

    try:
        data = {
            "payer": "",
            "amount": "",
            "spending_category": "",
            "recipients": "",
            "note": ""
        }
        #text_format = ng∆∞·ªùi chi, h·∫°ng m·ª•c chi, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n, ghi ch√∫.


        content = text.split(",")
        content = [c.strip() for c in content]

        
        # N·∫øu c√≥ 5 ph·∫ßn t·ª≠: ng∆∞·ªùi chi, h·∫°ng m·ª•c, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n, ghi ch√∫
        if len(content) == 5:
            data['payer'] = replace_slang(content[0].lower(), slang_mapping).title()
            data['spending_category'] = content[1]
            data['amount'] = content[2]
            content[3] = replace_slang(content[3].lower(), slang_mapping).title()
            data['recipients'] = content[3]
            data['note'] = content[4]
        # N·∫øu c√≥ 4 ph·∫ßn t·ª≠: c√≥ th·ªÉ l√† [ng∆∞·ªùi chi, h·∫°ng m·ª•c, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n] ho·∫∑c [h·∫°ng m·ª•c, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n, ghi ch√∫]
        elif len(content) == 4:
            know_names = slang_mapping.get("username", [])
            content[0] = replace_slang(content[0].lower(), slang_mapping).title()
            # N·∫øu ph·∫ßn t·ª≠ ƒë·∫ßu l√† t√™n ng∆∞·ªùi trong danh s√°ch th√¨ l·∫•y l√†m payer
            if content[0].title() in know_names:
                data['payer'] = content[0]
                data['spending_category'] = content[1]
                data['amount'] = content[2]
                content[3] = replace_slang(content[3].lower(), slang_mapping).title()
                data['recipients'] = content[3]
                data['note'] = ""
            else:
                data['payer'] = slang_mapping.get(message.author.name, message.author.name)
                data['spending_category'] = content[0]
                data['amount'] = content[1]
                content[2] = replace_slang(content[2].lower(), slang_mapping).title()
                data['recipients'] = content[2]
                data['note'] = content[3]
        # N·∫øu c√≥ 3 ph·∫ßn t·ª≠: h·∫°ng m·ª•c, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n
        elif len(content) == 3:
            data['payer'] = slang_mapping.get(message.author.name, message.author.name)
            data['spending_category'] = content[0]
            data['amount'] = content[1]
            content[2] = replace_slang(content[2].lower(), slang_mapping).title()
            data['recipients'] = content[2]
            data['note'] = ""
        # N·∫øu c√≥ 2 ph·∫ßn t·ª≠: h·∫°ng m·ª•c, s·ªë ti·ªÅn
        elif len(content) == 2:
            data['payer'] = slang_mapping.get(message.author.name, message.author.name)
            data['spending_category'] = content[0]
            data['amount'] = content[1]
            data['recipients'] = "M·ªçi Ng∆∞·ªùi"
            data['note'] = ""
        else:
            await message.reply("C√∫ ph√°p ch∆∞a ƒë√∫ng bro! Nh·∫≠p ƒë·ªß √≠t nh·∫•t 2 ph·∫ßn t·ª≠: h·∫°ng m·ª•c, s·ªë ti·ªÅn nha!")
            return

        data["amount"] = parse_amount(data['amount'], slang_mapping)[0]

        # if data["amount"]:
        #     amt_text = data["amount"].lower().replace(",", "")
        #     if "k" in amt_text and "tr" in amt_text:
        #         parts = amt_text.split("tr")
        #         data["amount"] = int(
        #             float(parts[1].replace("k", "")) * 1000 +
        #             float(parts[0]) * 1000000)
        #     elif "k" in amt_text:
        #         data["amount"] = int(float(amt_text.replace("k", "")) * 1000)
        #     elif "tr" in amt_text:
        #         data["amount"] = int(
        #             float(amt_text.replace("tr", "")) * 1000000)
        #     else:
        #         try:
        #             data["amount"] = int(amt_text)
        #         except:
        #             data["amount"] = 0
        # else:
        #     data["amount"] = 0
        # if data['amount'] == 0:
        #     await message.reply(
        #         "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c s·ªë ti·ªÅn.\nVui l√≤ng g·ª≠i l·∫°i theo ƒë·ªãnh d·∫°ng: h·∫°ng m·ª•c chi, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n, ghi ch√∫.\nV√≠ d·ª•: ƒÉn u·ªëng, 500k, Nghƒ©a, Kh√¥ng c√≥ ghi ch√∫ th√¨ ƒë·ªÉ tr·ªëng."
        #     )
        #     return

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # user = knowledge.username.get(message.author.name, message.author.name)
        
        sheet_log.append_row([
            now, data['spending_category'], data['amount'], data['payer'],
            data['recipients'].title(), data['note']
        ])

        await message.reply(
            f"‚úÖ ƒê√£ ghi v√†o sheet:\n\
                    Ng∆∞·ªùi chi: ***{data['payer']}***\n\
                    H·∫°ng m·ª•c chi: ***{data['spending_category']}***\n\
                    S·ªë ti·ªÅn:"+f" ***{data['amount']:,}".replace(",",".")+f"ƒë***\n\
                    Ng∆∞·ªùi Nh·∫≠n: ***{data['recipients'].title()}***\n\
                    Ghi ch√∫: ***{data['note'] or 'Kh√¥ng c√≥'}***\n\
                    Xem file google sheet [***T·∫†I ƒê√ÇY***](https://docs.google.com/spreadsheets/d/1HtiGGXWZ6II9X_L3BxUh60e13isLuOhWL6NR1wcwvVk/edit?gid=0#gid=0)"
        )

    except Exception as e:
        await message.reply(
            f"‚ùå L·ªói khi ghi d·ªØ li·ªáu: {e} \nVui l√≤ng g·ª≠i l·∫°i theo ƒë·ªãnh d·∫°ng: ng∆∞·ªùi chi, h·∫°ng m·ª•c chi, s·ªë ti·ªÅn, ng∆∞·ªùi nh·∫≠n, ghi ch√∫.\nV√≠ d·ª•: ghi gi√πm ng∆∞·ªùi chi ho·∫∑c ƒë·ªÉ tr·ªëng, ƒÉn u·ªëng, 500k, Nghƒ©a, Kh√¥ng c√≥ ghi ch√∫ ho·∫∑c ƒë·ªÉ tr·ªëng."
        )


# Bot command g·ª≠i bi·ªÉu ƒë·ªì
@bot.command()
async def thongkechi(ctx, time=None):
    data = sheet_log.get_all_values()
    chart_pay = generate_chart_pay_by_month(data, time)
    if not chart_pay:
        await ctx.reply(f"Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong th√°ng {time}.")
        return
    if time is None:
        await ctx.reply(
            f"üìä Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th·ªùi gian c·ª• th·ªÉ n√™n th·ªëng k√™ to√†n b·ªô d·ªØ li·ªáu chi ti√™u: ",
            file=discord.File(chart_pay, 'chart.png'))
    else:
        await ctx.reply(f"üìä Th·ªëng k√™ chi ti√™u th√°ng {time}:",
                        file=discord.File(chart_pay, 'chart.png'))


@bot.command()
async def thongkeno(ctx):
    user = ctx.author.name
    name = replace_slang(user, slang_mapping)
    data = sheet_log.get_all_values()
    time = datetime.now().strftime("%m/%Y")
    chart_debt = generate_chart_debt(name, data)
    if not chart_debt:
        await ctx.reply(f"{name} Kh√¥ng c√≥ d·ªØ li·ªáu.")
        return
    await ctx.reply(f"üìä Th·ªëng k√™ n·ª£ ƒë·∫øn th√°ng {time}:",
                    file=discord.File(chart_debt, 'chart.png'))


@bot.event
async def on_disconnect():
    print("Bot ƒë√£ b·ªã m·∫•t k·∫øt n·ªëi...")

@bot.event
async def on_resumed():
    print("Bot ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")

# Ch·∫°y bot v√† web server
keep_alive()
bot.run(os.getenv('NoteBotDiscordToken'))
